#+title: Imtermiall2

* AssetManager
- [[file:Imtermiall2_old.org][Initial]]
- [[file:notes.org::*\[2023-12-13 Mi 16:54\] AssetManager][Thoughts]]

#+begin_src cpp :results output
#include "Assets.h"
#include <iostream>

using namespace Assets;

REGISTER_MANAGER(int, float)

int main(void) {
    std::cout << "Is Asset loaded? " << (AssetManager::contains("funny_num") ? "yes" : "no.") << std::endl;
    std::cout << "Register Asset! (69)" << std::endl;

    AssetManager::register_asset("funny_num", 69);

    std::cout << "Register Asset again!" << std::endl;

    AssetManager::register_asset("funny_num", 69);

    std::cout << "Is Asset loaded? " << (AssetManager::contains("funny_num") ? "yes" : "no.") << std::endl;
    std::string the_asset = AssetManager::get_asset<int>("funny_num").transform([](auto a){return std::to_string(a);}).value_or("not present");
    std::cout << "The Asset: " << the_asset << std::endl;

    std::cout << "Unregister once!" << std::endl;

    AssetManager::unregister_asset("funny_num");

    std::cout << "Is Asset loaded? " << (AssetManager::contains("funny_num") ? "yes" : "no.") << std::endl;
    std::cout << "Unregister again!" << std::endl;

    AssetManager::unregister_asset("funny_num");

    std::cout << "Is Asset loaded? " << (AssetManager::contains("funny_num") ? "yes" : "no.") << std::endl;
    the_asset = AssetManager::get_asset<int>("funny_num").transform([](auto a){return std::to_string(a);}).value_or("not present");
    std::cout << "The Asset: " << the_asset << std::endl;
}
#+end_src

#+RESULTS:
#+begin_example
Is Asset loaded? no.
Register Asset! (69)
Register Asset again!
Is Asset loaded? yes
The Asset: 69
Unregister once!
Is Asset loaded? yes
Unregister again!
Is Asset loaded? no.
The Asset: not present
#+end_example

#+begin_src plantuml :file fuuck.svg

NVME -> TMP : Windows
Arch -> NVME
#+end_src

#+RESULTS:
[[file:fuuck.svg]]
